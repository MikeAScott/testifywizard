package com.sqs.${projectName}.stories
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.sqs.${projectName}.SystemClock

description "As a: Tester I want to: take control of the system clock So that: I can test time dependent features of the application"

DateFormat dfm = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");


scenario "By default the system clock is in sync with internal Date class", {

	when "Checking the system clock", {
		sysTime = SystemClock.getNow()
	}

	then "the time returned should be the same as internal date class", {
		internalTime=new Date()
		sysTime.toString().shouldBeEqualTo internalTime.toString()
	}
}

scenario "We can set the system clock to a given date", {

	when "We set the clock to Christmas 2006", {
		xmas = dfm.parse("2006-12-25 12:04:05");
		SystemClock.set(xmas)
	}

	then "the time returned should be the same as Christmas 2006", {
		xmas2 = dfm.parse("2006-12-25 12:04:05");
		SystemClock.getNow().shouldBeEqualTo xmas2
	}
}

scenario "We can reset the system clock after setting to resync with Date class", {

	when "We set the clock to New Year 2009", {
		newyear = dfm.parse("2009-01-01 18:20:00");
		SystemClock.set(newyear)
	}
	
	and "We reset the system clock", {
		SystemClock.reset()
	}

	then "the time returned should be the same as the internal time", {
		internalTime=new Date()
		sysTime.toString().shouldBeEqualTo internalTime.toString()
	}
}
